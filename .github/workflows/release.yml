name: Release Build

on:
  push:
    tags:
      - "v*" # Trigger on semantic version tags (v1.0.0, etc.)

permissions:
  contents: write

jobs:
  build:
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout with Submodules
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0 # Needed for version tagging

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev nasm

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y ninja
          refreshenv

          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
          ./vcpkg/vcpkg.exe integrate install
          ./vcpkg/vcpkg.exe install freetype harfbuzz

      - name: Build (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          chmod +x scripts/build-macos.sh
          ./scripts/build-macos.sh

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x scripts/build-ubuntu.sh
          ./scripts/build-ubuntu.sh

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./scripts/build-windows.ps1
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ccsakura-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: List Downloaded Artifacts
        run: ls -R downloaded-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            downloaded-artifacts/ccsakura-Linux/CCSakura-linux.tar.gz
            downloaded-artifacts/ccsakura-macOS/CCSakura.zip
            downloaded-artifacts/ccsakura-Windows/CCSakura-Win.zip
