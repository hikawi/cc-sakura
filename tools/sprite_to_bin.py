# This is a tool-file, meant to transform the provided sprite and
# json file into a .sprite file (generated by Aseprite).

import sys
import os
import json
import struct


TOOL_VERSION = 1


def main():
    if len(sys.argv) < 3:
        print("This program requires 2 arguments. Use sprite_to_bin.py spritesheet.png spritedata.json")
        return

    if len(sys.argv) > 3:
        print(f"There are more arguments than required. Ignoring {sys.argv[3:]}")

    sprsheet = sys.argv[1]
    sprdata = sys.argv[2]
    print(f"You have selected the sprite sheet to be \"{sprsheet}\"")
    print(f"You have selected the sprite data to be \"{sprdata}\"")

    try:
        with open(sprdata, 'r') as f:
            data = json.load(f)

        # Open a new file for writing at the same path of the provided sheet
        sprname, _ = os.path.splitext(sprsheet)
        print(sprname)
        outpath = f"{sprname}.sprite"

        with open(outpath, 'wb') as f:
            print(f"Using v{TOOL_VERSION} of sprite_to_bin")
            f.write(struct.pack("<I", TOOL_VERSION))

            f.write(struct.pack("<Q", os.path.getsize(sprsheet)))
            print(f"Written {os.path.getsize(sprsheet)} bytes as image length")

            with open(sprsheet, 'rb') as img:
                f.write(img.read()) # Needs work if sprite sheet is giant.
            print("Written all of image")

            print("Appending image dimensions")
            f.write(struct.pack("<I", data['meta']['size']['w']))
            f.write(struct.pack("<I", data['meta']['size']['h']))

            print("Appending frame tags data")
            frame_tags = data['meta']['frameTags']
            f.write(struct.pack("<I", len(frame_tags)))
            for tag in frame_tags:
                # Length of the name (u32), the name (char*), and from (u32) frame what to frame what (u32)
                f.write(struct.pack("<I", len(tag['name'])))
                f.write(struct.pack(f"<{len(tag['name'])}s", bytes(tag['name'], 'utf-8')))
                f.write(struct.pack("<I", tag['from']))
                f.write(struct.pack("<I", tag['to']))

            print("Appending frames data")
            frames = data['frames']
            f.write(struct.pack("<I", len(frames)))
            for frame in frames:
                # Source size, relative source size, absolute source rect
                f.write(struct.pack("<I", frame["sourceSize"]["w"]))
                f.write(struct.pack("<I", frame["sourceSize"]["h"]))
                f.write(struct.pack("<I", frame["spriteSourceSize"]["x"]))
                f.write(struct.pack("<I", frame["spriteSourceSize"]["y"]))
                f.write(struct.pack("<I", frame["spriteSourceSize"]["w"]))
                f.write(struct.pack("<I", frame["spriteSourceSize"]["h"]))
                f.write(struct.pack("<I", frame["frame"]["x"]))
                f.write(struct.pack("<I", frame["frame"]["y"]))
                f.write(struct.pack("<I", frame["frame"]["w"]))
                f.write(struct.pack("<I", frame["frame"]["h"]))
                f.write(struct.pack("<I", frame["duration"]))
                pass
    except OSError:
        print("An error occurred while opening those files")


if __name__ == "__main__":
    main()
